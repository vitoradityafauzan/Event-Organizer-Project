// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum CategoryList {
  // Special Event
  Special
  // Social Meeting & Convention
  Social
  // Trade Show
  Trade
  // Corporate & Gallas
  Corporate
}

enum Role {
  Attendees
  Organizer
}

enum LocationList {
  A1
  A2
  B1
  B2
  M1
  M2
  M3
  M4
}

enum PromoType {
  referral
  voucher
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples") // if you want to use snake_case format
}

model User {
  idUser         Int         @id @default(autoincrement())
  firstName      String
  lastName       String
  email          String      @unique
  password       String
  phone          String
  userType       Role
  referralCode   String?
  points         Int         @default(0)
  userUniqueCode String?     @unique
  isActive       Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  Event          Event[]
  Promotion      Promotion[]
  Ticket         Ticket[]
  Review         Review[]
}

model Category {
  idCategory Int          @id @default(autoincrement())
  name       CategoryList @default(Trade)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Event      Event[]
}

model Location {
  idLocation Int          @id @default(autoincrement())
  name       LocationList @default(A1)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Event      Event[]
}

model Event {
  idEvent     Int      @id @default(autoincrement())
  organizerId Int
  name        String
  slug        String
  desc        String   @db.LongText
  image       String?
  price       Int
  amount      Int
  categoryId  Int
  startDate   DateTime
  endDate     DateTime
  locationId  Int
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Promotion Promotion[]
  Ticket    Ticket[]

  user     User     @relation(fields: [organizerId], references: [idUser])
  category Category @relation(fields: [categoryId], references: [idCategory])
  location Location @relation(fields: [locationId], references: [idLocation])
}

// Untuk tipe referral, amount bisa dikurangi. di profile, count amount yg tidak expired.
model Promotion {
  idPromo   Int       @id @default(autoincrement())
  userId    Int
  type      PromoType @default(referral)
  amount    Int
  eventId   Int       @default(0) // Universal or specific event for voucher
  isExpired Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user  User  @relation(fields: [userId], references: [idUser])
  event Event @relation(fields: [eventId], references: [idEvent])
}

model Ticket {
  id           Int      @id @default(autoincrement())
  eventId      Int
  userId       Int
  purchaseDate DateTime @default(now())
  price        Float
  status       String   @default("Active")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  Review Review[]

  // Relations
  // event Event @relation("EventTickets", fields: [eventId], references: [id])
  // user  User  @relation("UserTickets", fields: [userId], references: [id])
  user  User  @relation(fields: [userId], references: [idUser])
  event Event @relation(fields: [eventId], references: [idEvent])
}

// model Ticket {
//   idTicket    Int      @id @default(autoincrement())
//   eventId     Int
//   userId      Int
//   priceTotal  Int
//   promoId     Int      @default(0)
//   promoAmount Int      @default(0)
//   total       Int
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }

model History {
  idHistory Int      @id @default(autoincrement())
  eventId   Int
  userId    Int
  tiketId   Int
  payAmount Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  idReview  Int      @id @default(autoincrement())
  userId    Int
  ticketId  Int
  review    Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [idUser])
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
}
