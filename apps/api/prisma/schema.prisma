// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum CategoryList {
  // Special Event
  Special
  // Social Meeting & Convention
  Social
  // Trade Show
  Trade
  // Corporate & Gallas
  Corporate
}

enum Role {
  Attendees
  Organizer
}

enum LocationList {
  A1
  A2
  B1
  B2
  M1
  M2
  M3
  M4
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples") // if you want to use snake_case format
}

model User {
  idUser    Int      @id @default(autoincrement())
  firstName      String
  lastName       String
  email          String   @unique
  password       String
  phone          String
  userType       Role
  referralCode   String?
  points         Int      @default(0)
  userUniqueCode String?  @unique
  isActive       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  events         Event[]  @relation("OrganizedEvents")
  Ticket    Ticket[]
}


model Category {
  idCategory Int          @id @default(autoincrement())
  name       CategoryList @default(Trade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}



enum IsPaidEvent {
  Free
  Paid
}

model Event {
  idEvent     Int      @id @default(autoincrement())
  organizerId Int
  firstName   String
  lastName    String
  description String   @db.LongText
  image       String
  price          Float       @default(0.0)
  eventDate      DateTime
  eventTime      DateTime
  sellEndDate    DateTime
  sellEndTime    DateTime
  availableSeats Int
  isPaidEvent    IsPaidEvent
  location String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt 

  // Relations
 
  organizer   User  @relation("OrganizedEvents", fields: [organizerId], references: [idUser])
  

  
}

model Ticket {
  id           Int      @id @default(autoincrement())
  eventId      Int
  userId       Int
  purchaseDate DateTime @default(now())
  price        Float
  status       String   @default("Active")

  // Relations
  // event Event @relation("EventTickets", fields: [eventId], references: [id])
  // user  User  @relation("UserTickets", fields: [userId], references: [id])
  user User @relation( fields: [userId], references: [idUser])
}